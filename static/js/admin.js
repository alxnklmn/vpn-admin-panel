
function clearForm() {
    document.getElementById("message").value = "";
    document.getElementById("broadcast-result").style.display = "none";
}

document.getElementById("broadcast-form").addEventListener("submit", async function(e) {
    e.preventDefault();
    const message = document.getElementById("message").value.trim();
    if (!message) { alert("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"); return; }
    if (!confirm("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?")) return;
    
    const submitBtn = e.target.querySelector("button[type=submit]");
    submitBtn.textContent = "–û—Ç–ø—Ä–∞–≤–∫–∞...";
    submitBtn.disabled = true;
    
    try {
        const response = await fetch("/admin/broadcast", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ message: message })
        });
        const result = await response.json();
        
        const resultBox = document.getElementById("broadcast-result");
        const statusDiv = document.getElementById("broadcast-status");
        statusDiv.innerHTML = result.success ? 
            `<div style="color: green;">‚úÖ ${result.message}</div>` : 
            `<div style="color: red;">‚ùå ${result.message}</div>`;
        resultBox.style.display = "block";
    } catch (error) {
        console.error("Error:", error);
        document.getElementById("broadcast-status").innerHTML = "<div style=\"color: red;\">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏</div>";
        document.getElementById("broadcast-result").style.display = "block";
    } finally {
        submitBtn.textContent = "üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É";
        submitBtn.disabled = false;
    }
});

async function loadLogs() {
    const logsContent = document.getElementById("logs-content");
    const lines = document.getElementById("log-lines").value;
    logsContent.textContent = "–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–æ–≤...";
    
    try {
        const response = await fetch(`/admin/logs?lines=${lines}`);
        const result = await response.json();
        logsContent.textContent = result.success ? (result.logs || "–õ–æ–≥–∏ –ø—É—Å—Ç—ã") : `–û—à–∏–±–∫–∞: ${result.error}`;
    } catch (error) {
        logsContent.textContent = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: " + error.message;
    }
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
let allTranslations = {};
let currentLanguage = "";
let originalTranslations = {};

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
async function loadTranslations() {
    try {
        const response = await fetch("/admin/translations", {
            method: "GET",
            credentials: "same-origin", // –í–∫–ª—é—á–∞–µ–º –∫—É–∫–∏
            headers: {
                "X-Requested-With": "XMLHttpRequest"
            }
        });
        
        if (response.status === 401) {
            alert("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
            window.location.reload();
            return;
        }
        
        const result = await response.json();
        
        if (result.success) {
            allTranslations = result.translations;
            populateLanguageSelect();
            console.log("–ü–µ—Ä–µ–≤–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", allTranslations);
        } else {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", result.error);
            alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: " + result.error);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:", error);
        alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: " + error.message);
    }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤
function populateLanguageSelect() {
    const select = document.getElementById("language-select");
    select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫...</option>';
    
    const languageNames = {
        'ru': '–†—É—Å—Å–∫–∏–π (ru.json)',
        'en': 'English (en.json)'
    };
    
    for (const [langCode, translations] of Object.entries(allTranslations)) {
        const option = document.createElement("option");
        option.value = langCode;
        option.textContent = languageNames[langCode] || `${langCode.toUpperCase()} (${langCode}.json)`;
        select.appendChild(option);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
function loadTranslationForLanguage() {
    const select = document.getElementById("language-select");
    const selectedLang = select.value;
    
    if (!selectedLang) {
        document.getElementById("translation-editor").style.display = "none";
        return;
    }
    
    currentLanguage = selectedLang;
    const translations = allTranslations[selectedLang];
    
    if (!translations) {
        alert("–ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
    originalTranslations = JSON.parse(JSON.stringify(translations));
    
    displayTranslationEditor(selectedLang, translations);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function displayTranslationEditor(language, translations) {
    const editor = document.getElementById("translation-editor");
    const currentLangSpan = document.getElementById("current-language");
    const fieldsContainer = document.getElementById("translation-fields");
    
    currentLangSpan.textContent = language.toUpperCase();
    fieldsContainer.innerHTML = "";
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    for (const [key, value] of Object.entries(translations)) {
        const fieldDiv = document.createElement("div");
        fieldDiv.className = "translation-field";
        
        fieldDiv.innerHTML = `
            <label for="trans_${key}">–ü–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–ª—é—á–∞:</label>
            <div class="field-key">${key}</div>
            <textarea id="trans_${key}" name="${key}">${escapeHtml(value)}</textarea>
        `;
        
        fieldsContainer.appendChild(fieldDiv);
    }
    
    editor.style.display = "block";
    document.getElementById("translation-result").style.display = "none";
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
async function saveTranslations() {
    if (!currentLanguage) {
        alert("–Ø–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω");
        return;
    }
    
    const fieldsContainer = document.getElementById("translation-fields");
    const textareas = fieldsContainer.querySelectorAll("textarea");
    const updatedTranslations = {};
    
    // –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    textareas.forEach(textarea => {
        const key = textarea.name;
        const value = textarea.value;
        updatedTranslations[key] = value;
    });
    
    try {
        const response = await fetch("/admin/translations/update", {
            method: "POST",
            credentials: "same-origin", // –í–∫–ª—é—á–∞–µ–º –∫—É–∫–∏
            headers: {
                "Content-Type": "application/json",
                "X-Requested-With": "XMLHttpRequest"
            },
            body: JSON.stringify({
                language: currentLanguage,
                data: updatedTranslations
            })
        });
        
        const result = await response.json();
        const resultBox = document.getElementById("translation-result");
        const statusDiv = document.getElementById("translation-status");
        
        if (result.success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            allTranslations[currentLanguage] = updatedTranslations;
            originalTranslations = JSON.parse(JSON.stringify(updatedTranslations));
            
            statusDiv.innerHTML = `<div style="color: green;">‚úÖ ${result.message}<br/>üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π...</div>`;
            resultBox.className = "result-box result-success";
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            restartBot();
        } else {
            statusDiv.innerHTML = `<div style="color: red;">‚ùå –û—à–∏–±–∫–∞: ${result.error}</div>`;
            resultBox.className = "result-box result-error";
        }
        
        resultBox.style.display = "block";
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);
        const resultBox = document.getElementById("translation-result");
        const statusDiv = document.getElementById("translation-status");
        statusDiv.innerHTML = `<div style="color: red;">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}</div>`;
        resultBox.className = "result-box result-error";
        resultBox.style.display = "block";
    }
}

// –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cancelEdit() {
    if (!currentLanguage) return;
    
    if (confirm("–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤–µ—Ä–Ω—É—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è?")) {
        displayTranslationEditor(currentLanguage, originalTranslations);
        document.getElementById("translation-result").style.display = "none";
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é showTab –¥–ª—è –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function showTab(tabName) {
    document.querySelectorAll(".tab-content").forEach(tab => tab.classList.remove("active"));
    document.querySelectorAll(".tab-btn").forEach(btn => btn.classList.remove("active"));
    document.getElementById(tabName + "-tab").classList.add("active");
    event.target.classList.add("active");
    
    if (tabName === "logs") loadLogs();
    
    // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if (tabName === 'translations' && Object.keys(allTranslations).length === 0) {
        loadTranslations();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
async function restartBot() {
    try {
        const response = await fetch("/admin/restart-bot", {
            method: "POST",
            credentials: "same-origin",
            headers: {
                "X-Requested-With": "XMLHttpRequest",
                "Content-Type": "application/json"
            }
        });
        
        if (response.status === 401) {
            alert("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
            window.location.reload();
            return;
        }
        
        const result = await response.json();
        const statusDiv = document.getElementById("translation-status");
        
        if (result.success) {
            statusDiv.innerHTML = `<div style="color: green;">‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã<br/>üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –∑–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã!</div>`;
        } else {
            statusDiv.innerHTML = `<div style="color: orange;">‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.<br/>‚ùå ${result.error}<br/>üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é.</div>`;
        }
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", error);
        const statusDiv = document.getElementById("translation-status");
        statusDiv.innerHTML = `<div style="color: orange;">‚ö†Ô∏è –ü–µ—Ä–µ–≤–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.<br/>üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é.</div>`;
    }
}
