package main

import (
	"bytes"
	"context"
	"crypto/rand"
	"encoding/json"
	"fmt"
	"html/template"
	"log"
	"log/slog"
	"math/big"
	"net/http"
	"os"
	"os/exec"
	"os/signal"
	"path/filepath"
	"strings"
	"time"

	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/joho/godotenv"
)

type Customer struct {
	ID               int64      `json:"id"`
	TelegramID       int64      `json:"telegram_id"`
	ExpireAt         *time.Time `json:"expire_at"`
	CreatedAt        time.Time  `json:"created_at"`
	SubscriptionLink *string    `json:"subscription_link"`
	Language         string     `json:"language"`
}

type BroadcastRequest struct {
	Message string `json:"message"`
}

type BroadcastResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Sent    int    `json:"sent"`
	Failed  int    `json:"failed"`
}

type LogsResponse struct {
	Success bool   `json:"success"`
	Logs    string `json:"logs"`
	Error   string `json:"error,omitempty"`
}

type TranslationResponse struct {
	Success      bool                       `json:"success"`
	Translations map[string]map[string]string `json:"translations,omitempty"`
	Error        string                     `json:"error,omitempty"`
}

type UpdateTranslationRequest struct {
	Language string            `json:"language"`
	Data     map[string]string `json:"data"`
}

type RestartBotResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Error   string `json:"error,omitempty"`
}

type Server struct {
	db           *pgxpool.Pool
	adminUser    string
	adminPass    string
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if err := godotenv.Load(); err != nil {
		log.Println("Warning: .env file not found")
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
	adminUser := generateRandomString(8)
	adminPass := generateRandomString(12)
	
	log.Printf("üîê Admin Panel Credentials:")
	log.Printf("üë§ Username: %s", adminUser)
	log.Printf("üîë Password: %s", adminPass)
	log.Printf("üåê Access URL: http://localhost:8081")

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
	dbURL := getEnv("DATABASE_URL", "postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable")
	db, err := pgxpool.Connect(context.Background(), dbURL)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	defer db.Close()

	server := &Server{
		db:        db,
		adminUser: adminUser,
		adminPass: adminPass,
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—É—Ç—ã
	mux := http.NewServeMux()
	
	// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
	mux.Handle("/static/", http.StripPrefix("/static/", http.FileServer(http.Dir("static"))))
	
	// API endpoints
	mux.HandleFunc("/admin/broadcast", server.broadcastHandler)
	mux.HandleFunc("/admin/logs", server.logsHandler)
	mux.HandleFunc("/admin/translations", server.translationsHandler)
	mux.HandleFunc("/admin/translations/update", server.updateTranslationHandler)
	mux.HandleFunc("/admin/restart-bot", server.restartBotHandler)
	
	// –õ–æ–≥–∏–Ω
	mux.HandleFunc("/login", server.loginHandler)
	
	// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
	mux.HandleFunc("/", server.indexHandler)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	srv := &http.Server{
		Addr:    ":8081",
		Handler: mux,
	}

	// Graceful shutdown
	go func() {
		sigChan := make(chan os.Signal, 1)
		signal.Notify(sigChan, os.Interrupt)
		<-sigChan
		
		log.Println("Shutting down server...")
		ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
		defer cancel()
		
		if err := srv.Shutdown(ctx); err != nil {
			log.Printf("Server shutdown error: %v", err)
		}
	}()

	log.Printf("Admin server starting on port 8081...")
	if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
		log.Fatalf("Server error: %v", err)
	}
}

func (s *Server) loginHandler(w http.ResponseWriter, r *http.Request) {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª–æ–≥–∏–Ω–∞
	if r.Method == http.MethodPost {
		username := r.FormValue("username")
		password := r.FormValue("password")
		
		if username == s.adminUser && password == s.adminPass {
			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–∫–∏
			http.SetCookie(w, &http.Cookie{
				Name:     "admin_session",
				Value:    "authenticated",
				Path:     "/",
				MaxAge:   3600, // 1 —á–∞—Å
				HttpOnly: true,
			})
			http.Redirect(w, r, "/", http.StatusSeeOther)
			return
		}
		
		// –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ —Å –æ—à–∏–±–∫–æ–π
		s.showLoginForm(w, "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
		return
	}
	
	// GET –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
	s.showLoginForm(w, "")
}

func (s *Server) indexHandler(w http.ResponseWriter, r *http.Request) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
	if !s.checkAuth(w, r) {
		return
	}
	
	tmpl, err := template.ParseFiles("templates/admin.html")
	if err != nil {
		http.Error(w, "Template error", http.StatusInternalServerError)
		return
	}
	
	tmpl.Execute(w, nil)
}

func (s *Server) broadcastHandler(w http.ResponseWriter, r *http.Request) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
	if !s.checkAuth(w, r) {
		return
	}
	
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req BroadcastRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	if req.Message == "" {
		http.Error(w, "Message is required", http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	customers, err := s.getAllCustomers(r.Context())
	if err != nil {
		slog.Error("Failed to get customers for broadcast", "error", err)
		http.Error(w, "Failed to get customers", http.StatusInternalServerError)
		return
	}

	sent := 0
	failed := 0

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
	botToken := getEnv("TELEGRAM_TOKEN", "")
	if botToken == "" {
		http.Error(w, "Telegram token not configured", http.StatusInternalServerError)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	for _, customer := range customers {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Bot API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
		err := s.sendTelegramMessage(customer.TelegramID, req.Message, botToken)
		if err != nil {
			slog.Error("Failed to send broadcast message", 
				"telegram_id", customer.TelegramID, 
				"error", err)
			failed++
		} else {
			sent++
		}

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å Telegram API
		time.Sleep(50 * time.Millisecond)
	}

	response := BroadcastResponse{
		Success: true,
		Message: fmt.Sprintf("Broadcast completed. Sent: %d, Failed: %d", sent, failed),
		Sent:    sent,
		Failed:  failed,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func (s *Server) logsHandler(w http.ResponseWriter, r *http.Request) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
	if !s.checkAuth(w, r) {
		return
	}
	
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	lines := "100"
	if r.URL.Query().Get("lines") != "" {
		lines = r.URL.Query().Get("lines")
	}

	logs, err := s.getContainerLogs(lines)
	
	response := LogsResponse{
		Success: err == nil,
		Logs:    logs,
	}

	if err != nil {
		response.Error = err.Error()
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

func (s *Server) getAllCustomers(ctx context.Context) ([]Customer, error) {
	query := `SELECT id, telegram_id, expire_at, created_at, subscription_link, language 
			  FROM customer 
			  ORDER BY created_at DESC`
	
	rows, err := s.db.Query(ctx, query)
	if err != nil {
		return nil, fmt.Errorf("failed to query customers: %w", err)
	}
	defer rows.Close()

	var customers []Customer
	for rows.Next() {
		var customer Customer
		err := rows.Scan(
			&customer.ID,
			&customer.TelegramID,
			&customer.ExpireAt,
			&customer.CreatedAt,
			&customer.SubscriptionLink,
			&customer.Language,
		)
		if err != nil {
			return nil, fmt.Errorf("failed to scan customer: %w", err)
		}
		customers = append(customers, customer)
	}

	return customers, nil
}

func (s *Server) sendTelegramMessage(chatID int64, message, botToken string) error {
	url := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", botToken)
	
	data := map[string]interface{}{
		"chat_id":    chatID,
		"text":       message,
		"parse_mode": "HTML",
	}
	
	jsonData, err := json.Marshal(data)
	if err != nil {
		return err
	}
	
	resp, err := http.Post(url, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	
	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("telegram API error: %d", resp.StatusCode)
	}
	
	return nil
}

func (s *Server) getContainerLogs(lines string) (string, error) {
	cmd := exec.Command("docker", "logs", "--tail", lines, "remnawave-telegram-shop-bot-1")
	output, err := cmd.CombinedOutput()
	if err != nil {
		return "", fmt.Errorf("failed to get container logs: %w", err)
	}
	
	return string(output), nil
}

func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

// generateRandomString - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func generateRandomString(length int) string {
	const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
	b := make([]byte, length)
	for i := range b {
		n, _ := rand.Int(rand.Reader, big.NewInt(int64(len(charset))))
		b[i] = charset[n.Int64()]
	}
	return string(b)
}

// checkAuth - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *Server) checkAuth(w http.ResponseWriter, r *http.Request) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ—Å—Å–∏—è
	cookie, err := r.Cookie("admin_session")
	if err == nil && cookie.Value == "authenticated" {
		return true
	}
	
	// –î–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –æ—à–∏–±–∫—É
	if r.Header.Get("X-Requested-With") == "XMLHttpRequest" || 
	   r.Header.Get("Content-Type") == "application/json" ||
	   r.URL.Path == "/admin/translations" ||
	   r.URL.Path == "/admin/translations/update" {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"success": false,
			"error":   "Authentication required",
		})
		return false
	}
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
	s.showLoginForm(w, "")
	return false
}

// showLoginForm - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
func (s *Server) showLoginForm(w http.ResponseWriter, errorMsg string) {
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	
	html := `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VPN Admin - –í—Ö–æ–¥</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; display: flex; justify-content: center; align-items: center; min-height: 100vh; }
        .login-container { background: white; padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); width: 100%; max-width: 400px; }
        .login-container h1 { text-align: center; margin-bottom: 30px; color: #333; }
        .form-group { margin-bottom: 20px; }
        .form-group label { display: block; margin-bottom: 8px; font-weight: bold; color: #333; }
        .form-group input { width: 100%; padding: 12px; border: 2px solid #e1e5e9; border-radius: 4px; font-size: 16px; box-sizing: border-box; }
        .form-group input:focus { outline: none; border-color: #007bff; }
        .btn { width: 100%; padding: 12px; background: #007bff; color: white; border: none; border-radius: 4px; font-size: 16px; cursor: pointer; }
        .btn:hover { background: #0056b3; }
        .error { color: #dc3545; text-align: center; margin-bottom: 20px; }
        .info { background: #e7f3ff; padding: 15px; border-radius: 4px; margin-top: 20px; border-left: 4px solid #007bff; }
        .info h3 { margin: 0 0 10px 0; color: #333; }
        .info p { margin: 5px 0; color: #666; }
    </style>
</head>
<body>
    <div class="login-container">
        <h1>üîê VPN Admin Panel</h1>
        <form method="POST" action="/login">
            <div class="form-group">
                <label for="username">–õ–æ–≥–∏–Ω:</label>
                <input type="text" id="username" name="username" required>
            </div>
            <div class="form-group">
                <label for="password">–ü–∞—Ä–æ–ª—å:</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit" class="btn">–í–æ–π—Ç–∏</button>
        </form>
        <div class="info">
            <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h3>
            <p>–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ª–æ–≥–∞—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.</p>
            <p>–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>docker logs vpn-admin-server</code></p>
        </div>
    </div>
</body>
</html>`
	
	if errorMsg != "" {
		html = strings.Replace(html, `<form method="POST" action="/login">`, 
			`<div class="error">`+errorMsg+`</div><form method="POST" action="/login">`, 1)
	}
	
	fmt.Fprint(w, html)
}

// translationsHandler - –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
func (s *Server) translationsHandler(w http.ResponseWriter, r *http.Request) {
	log.Printf("üîÑ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –æ—Ç %s", r.RemoteAddr)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
	if !s.checkAuth(w, r) {
		log.Printf("‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è %s", r.RemoteAddr)
		return
	}
	
	if r.Method != http.MethodGet {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	log.Printf("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ translations...")
	translations, err := s.loadAllTranslations()
	
	response := TranslationResponse{
		Success:      err == nil,
		Translations: translations,
	}

	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: %v", err)
		response.Error = err.Error()
	} else {
		log.Printf("‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: %d —è–∑—ã–∫–æ–≤", len(translations))
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// updateTranslationHandler - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
func (s *Server) updateTranslationHandler(w http.ResponseWriter, r *http.Request) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
	if !s.checkAuth(w, r) {
		return
	}
	
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req UpdateTranslationRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	if req.Language == "" || req.Data == nil {
		http.Error(w, "Language and data are required", http.StatusBadRequest)
		return
	}

	err := s.saveTranslation(req.Language, req.Data)
	
	response := map[string]interface{}{
		"success": err == nil,
	}

	if err != nil {
		response["error"] = err.Error()
	} else {
		response["message"] = fmt.Sprintf("–ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–∞ %s —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", req.Language)
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// loadAllTranslations - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
func (s *Server) loadAllTranslations() (map[string]map[string]string, error) {
	translationsDir := "translations"
	translations := make(map[string]map[string]string)

	files, err := os.ReadDir(translationsDir)
	if err != nil {
		return nil, fmt.Errorf("failed to read translations directory: %w", err)
	}

	for _, file := range files {
		if file.IsDir() || !strings.HasSuffix(file.Name(), ".json") {
			continue
		}

		langCode := strings.TrimSuffix(file.Name(), ".json")
		filePath := filepath.Join(translationsDir, file.Name())

		content, err := os.ReadFile(filePath)
		if err != nil {
			return nil, fmt.Errorf("failed to read translation file %s: %w", file.Name(), err)
		}

		var translation map[string]string
		if err := json.Unmarshal(content, &translation); err != nil {
			return nil, fmt.Errorf("failed to parse translation file %s: %w", file.Name(), err)
		}

		translations[langCode] = translation
	}

	return translations, nil
}

// saveTranslation - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Ñ–∞–π–ª
func (s *Server) saveTranslation(language string, data map[string]string) error {
	translationsDir := "translations"
	filePath := filepath.Join(translationsDir, language+".json")

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if err := os.MkdirAll(translationsDir, 0755); err != nil {
		return fmt.Errorf("failed to create translations directory: %w", err)
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º JSON —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
	jsonData, err := json.MarshalIndent(data, "", "  ")
	if err != nil {
		return fmt.Errorf("failed to marshal translation data: %w", err)
	}

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
	if err := os.WriteFile(filePath, jsonData, 0644); err != nil {
		return fmt.Errorf("failed to write translation file: %w", err)
	}

	return nil
}

// restartBotHandler - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
func (s *Server) restartBotHandler(w http.ResponseWriter, r *http.Request) {
	log.Printf("üîÑ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –æ—Ç %s", r.RemoteAddr)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
	if !s.checkAuth(w, r) {
		log.Printf("‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ %s", r.RemoteAddr)
		return
	}
	
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	log.Printf("ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
	err := s.restartMainBot()
	
	response := RestartBotResponse{
		Success: err == nil,
	}

	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: %v", err)
		response.Error = err.Error()
		response.Message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"
	} else {
		log.Printf("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
		response.Message = "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –∑–∞–≥—Ä—É–∑–∏–ª –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã"
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// restartMainBot - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
func (s *Server) restartMainBot() error {
	botContainerName := "remnawave-telegram-shop-bot-1"
	
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	checkCmd := exec.Command("docker", "inspect", botContainerName)
	if err := checkCmd.Run(); err != nil {
		return fmt.Errorf("–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä %s –Ω–µ –Ω–∞–π–¥–µ–Ω: %w", botContainerName, err)
	}
	
	log.Printf("üìã –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä %s –Ω–∞–π–¥–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º graceful restart...", botContainerName)
	
	// –í—ã–ø–æ–ª–Ω—è–µ–º graceful restart –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	restartCmd := exec.Command("docker", "restart", botContainerName)
	output, err := restartCmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ %s: %w. –í—ã–≤–æ–¥: %s", 
			botContainerName, err, string(output))
	}
	
	log.Printf("üîÑ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä %s —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω", botContainerName)
	
	// –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
	time.Sleep(3 * time.Second)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	statusCmd := exec.Command("docker", "ps", "--filter", "name="+botContainerName, "--format", "{{.Status}}")
	statusOutput, err := statusCmd.Output()
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: %w", err)
	}
	
	status := strings.TrimSpace(string(statusOutput))
	if !strings.Contains(status, "Up") {
		return fmt.Errorf("–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –°—Ç–∞—Ç—É—Å: %s", status)
	}
	
	log.Printf("‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä %s –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—Ç–∞—Ç—É—Å: %s", botContainerName, status)
	return nil
} 